#include "Attributes.h"

#include <ros/ros.h>
#include <BaseEvent.h>
#include <ID.h>
#include <Unit.h>
#include <SensorEventPublisher.h>

using namespace ::id::attribute;
using namespace std;

namespace aseia_car_sim {

class NurbsPublisher {
  private:
    struct NurbsBaseConfig : public BaseConfig {
      using TimeValueType = Value<double, 1>;
      using PositionValueType = Value<float, 3>;
      using PositionScale = Scale<std::ratio<1>, 1>;
    };
    using Ref = Attribute<Reference, Value<float, 3>, Meter>;
    using Ori = Attribute<Orientation, Value<float, 3>, Radian>;
    using NurbData = Attribute<Nurbs, Value<float, 100, 4, false>, Meter, Scale<std::ratio<1>, 1>>;
    using NurbsReference = BaseEvent<NurbsBaseConfig>
                            ::append<Ref>::type
                            ::append<NurbData>::type
                            ::append<Ori>::type;
    ros::Timer mTimer;
    SensorEventPublisher<NurbsReference> mPub;
    NurbsReference mRef;

    void periodic(const ros::TimerEvent& e){
      mRef.attribute(Time()).value()={{{ros::Time::now().toSec(), 0.0}}};
      mPub.publish(mRef);
    }
  public:
    NurbsPublisher()
      : mTimer(ros::NodeHandle().createTimer(ros::Duration(60), &NurbsPublisher::periodic, this))
    {
      mRef.attribute(Position()).value()={{{0, 0}}, {{0, 0}}, {{0, 0}}};
      mRef.attribute(Reference()).value()={{{0,0}}, {{0, 0}}, {{0, 0}}};
      mRef.attribute(Orientation()).value()={{{0,0}}, {{0, 0}}, {{0, 0}}};
      mRef.attribute(Nurbs()).value()={{{3}, {50}, {54}, {1.0}},
                                      {{-0.817921}, {0.100000}, { 0.880016}, {0.000000}},
                                      {{-0.111959}, {0.100000}, { 0.893773}, {0.018868}},
                                      {{ 0.609476}, {0.100000}, { 0.853651}, {0.037736}},
                                      {{ 0.689485}, {0.100000}, { 0.761257}, {0.075472}},
                                      {{ 0.684770}, {0.100000}, { 0.584421}, {0.094340}},
                                      {{ 0.567849}, {0.133460}, { 0.150999}, {0.113208}},
                                      {{ 0.613295}, {0.165426}, { 0.062120}, {0.132075}},
                                      {{ 0.730985}, {0.154800}, {-0.017006}, {0.150942}},
                                      {{ 0.669611}, {0.150515}, {-0.115869}, {0.169811}},
                                      {{ 0.551678}, {0.147399}, {-0.157836}, {0.188679}},
                                      {{ 0.544013}, {0.104171}, {-0.338800}, {0.207547}},
                                      {{ 0.643198}, {0.100000}, {-0.542451}, {0.226415}},
                                      {{ 0.593605}, {0.100003}, {-0.661537}, {0.245283}},
                                      {{ 0.402778}, {0.104194}, {-0.730530}, {0.264151}},
                                      {{ 0.289995}, {0.101793}, {-0.647523}, {0.283019}},
                                      {{ 0.195849}, {0.106096}, {-0.688906}, {0.301887}},
                                      {{ 0.165871}, {0.121607}, {-0.819444}, {0.320775}},
                                      {{ 0.065464}, {0.131929}, {-0.833800}, {0.339623}},
                                      {{-0.067073}, {0.164313}, {-0.731685}, {0.358491}},
                                      {{-0.093042}, {0.158789}, {-0.586748}, {0.377358}},
                                      {{-0.198970}, {0.197291}, {-0.523733}, {0.396226}},
                                      {{-0.287233}, {0.249212}, {-0.607756}, {0.415094}},
                                      {{-0.303264}, {0.264350}, {-0.742153}, {0.433962}},
                                      {{-0.271324}, {0.258711}, {-0.856906}, {0.452830}},
                                      {{-0.322375}, {0.277419}, {-0.901857}, {0.471698}},
                                      {{-0.438870}, {0.300451}, {-0.904676}, {0.490566}},
                                      {{-0.526790}, {0.326851}, {-0.831028}, {0.509434}},
                                      {{-0.613105}, {0.328382}, {-0.827364}, {0.528302}},
                                      {{-0.740142}, {0.329892}, {-0.767275}, {0.547170}},
                                      {{-0.726473}, {0.331461}, {-0.653252}, {0.566038}},
                                      {{-0.602260}, {0.330965}, {-0.631189}, {0.584906}},
                                      {{-0.443503}, {0.304114}, {-0.585725}, {0.603774}},
                                      {{-0.426867}, {0.291867}, {-0.525453}, {0.622642}},
                                      {{-0.483943}, {0.281931}, {-0.428702}, {0.641509}},
                                      {{-0.664134}, {0.309214}, {-0.432713}, {0.660377}},
                                      {{-0.782475}, {0.306808}, {-0.467563}, {0.679254}},
                                      {{-0.877450}, {0.269969}, {-0.415969}, {0.698113}},
                                      {{-0.907153}, {0.222859}, {-0.319046}, {0.716981}},
                                      {{-0.821015}, {0.225148}, {-0.224635}, {0.735849}},
                                      {{-0.626811}, {0.236137}, {-0.205420}, {0.754717}},
                                      {{-0.492893}, {0.206668}, {-0.170341}, {0.773585}},
                                      {{-0.453693}, {0.195613}, {-0.048821}, {0.792453}},
                                      {{-0.507749}, {0.173349}, { 0.076025}, {0.811321}},
                                      {{-0.695969}, {0.133065}, { 0.121281}, {0.830189}},
                                      {{-0.779359}, {0.113537}, { 0.171666}, {0.849057}},
                                      {{-0.863745}, {0.100001}, { 0.428953}, {0.867925}},
                                      {{-0.863745}, {0.100001}, { 0.428953}, {0.886792}},
                                      {{-0.817921}, {0.100000}, { 0.880016}, {0.905660}},
                                      {{-0.111959}, {0.100000}, { 0.893773}, {0.924528}},
                                      {{ 0.609476}, {0.100000}, { 0.853651}, {0.943396}},
                                      {{ 0.0},      {0.0},      { 0.0},      {0.962264}},
                                      {{ 0.0},      {0.0},      { 0.0},      {0.981132}},
                                      {{ 0.0},      {0.0},      { 0.0},      {1.000000}},
                                      };
    }
};
}

int main(int argc, char** argv) {
  ros::init(argc, argv, "nurbs");
  aseia_car_sim::NurbsPublisher nurbs;
  while(ros::ok())
    ros::spin();
  return 0;
}
